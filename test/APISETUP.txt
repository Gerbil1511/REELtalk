1. Get Your API Key
First, you need to sign up for an API key on TMDb's website. Once you have your API key, keep it handy as you'll need it to make API requests.


2. Install Requests Library
If you haven't already, install the requests library to make HTTP requests in Python:

pip install requests


3. Set Up Environment Variables
It's a good practice to store your API key in an environment variable. You can use the python-decouple package for this:

pip install python-decouple


4. Create a .env file in your project's root directory and add your API key:

TMDB_API_KEY=your_api_key_here


5. In your settings.py, add:

from decouple import config

TMDB_API_KEY = config('TMDB_API_KEY')


6. Fetch Movie Data from TMDb API
Create a function to fetch movie data from the TMDb API in your views.py file:

import requests
from django.conf import settings

def fetch_movie_details(movie_id):
    url = f'https://api.themoviedb.org/3/movie/{movie_id}'
    params = {
        'api_key': settings.TMDB_API_KEY,
        'language': 'en-US'
    }
    response = requests.get(url, params=params)
    return response.json()

7. Integrate API Call in Views
Use the fetch_movie_details function in your movie_detail view to get movie data from TMDb
and pass it to your template:

from django.shortcuts import render, get_object_or_404
from .models import Movie, ForumPost
from .forms import ForumPostForm

def movie_detail(request, movie_id):
    movie = get_object_or_404(Movie, id=movie_id)
    movie_details = fetch_movie_details(movie.tmdb_id)  # Assuming you store TMDb ID in your Movie model
    posts = ForumPost.objects.filter(movie=movie)
    
    if request.method == 'POST':
        form = ForumPostForm(request.POST)
        if form.is_valid():
            post = form.save(commit=False)
            post.movie = movie
            post.author = request.user
            post.save()
            return redirect('forum_post_list', movie_id=movie.id)
    else:
        form = ForumPostForm()
    
    return render(request, 'forum_post_list.html', {'movie': movie, 'posts': posts, 'form': form, 'movie_details': movie_details})


8. Update Templates
Update your movie_detail.html template to display the movie details fetched from the API:

{% extends 'base.html' %}
{% block title %}Movie Details{% endblock %}
{% block content %}
    <h2>{{ movie_details.title }}</h2>
    <p>Genre: {% for genre in movie_details.genres %}{{ genre.name }}{% if not forloop.last %}, {% endif %}{% endfor %}</p>
    <p>Release Date: {{ movie_details.release_date }}</p>
    <p>Director: <!-- You might need another API call to get the director --></p>
    <p>Overview: {{ movie_details.overview }}</p>
    <a href="{% url 'forum_post_list' movie.id %}">View Forum Posts</a>
{% endblock %}


9. Handle API Limits and Errors
Make sure to handle API limits and possible errors gracefully in your code. You can add error handling in your
fetch_movie_details function:

def fetch_movie_details(movie_id):
    url = f'https://api.themoviedb.org/3/movie/{movie_id}'
    params = {
        'api_key': settings.TMDB_API_KEY,
        'language': 'en-US'
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        return None  # Handle this case in your view


Next Steps:
Consider caching API responses to reduce the number of requests to TMDb.

If you need more detailed information like the director, you might need additional API calls to fetch crew
details.

With these steps, you should be able to integrate the TMDb API into your Django project and fetch movie details
to display on your site.
